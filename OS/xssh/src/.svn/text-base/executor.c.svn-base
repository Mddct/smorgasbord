#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <unistd.h>
#include <sys/types.h>
#include "executor.h"
#include <sys/wait.h>
#include <string.h>
#include <fcntl.h>
#include <time.h>

#define STDIN 0
#define STDOUT 1

void executeCommand(Builtin* command){
	/* Perform environment variable swapping here */
	if(show_cmds){
		if(command -> cmd != 1){
			/* Print original command */
			int i;
			printf("Printing the original command: ");
			for(i = 0; i < command -> n-1; i++){
				printf("%s ", command -> values[i]);
			}
				printf("%s\n", command -> values[command -> n-1]);
		
			/* Perform variable substitution */
			printf("Printing the command after substitution: ");
			for(i = 0; i < command -> n; i++){
				char* val = command -> values[i];
				if(val[0] == '$'){
					if(getenv(&((command->values[i])[1]))==NULL){
						printf("");
					}
					else{
						printf("%s ", getenv(&((command->values[i])[1])));
					}
				}
				else{
					printf("%s ", val);
				}
			}
			printf("\n");
		}
	}
	
	switch(code(command->values[0])){
       case ECHO:
		 executeEcho(command);
		 break;

       case QUIT:
       executeQuit(command);
		 break;
	   
	   case SET:
		 executeSet(command);
	     break;
	   
	   case UNSET:
		 executeUnset(command);
	     break;

	   case WAIT:
		 executeWait(command);
	     break;
	 
	   case CD:
		  executeCD(command);
	     break;
	 
	   case CHDIR:
		 executeCHDIR(command);
	     break;

     	case NONE:
		 printf("Please enter a valid command!\n");
		 break;
		 
		 case EXEC:
		 executeExec(command);
		 break;
		 
		 case COMMENT:
		 break;
		 
		 case PWD:
		 executePWD();
		 break;
		 
		 case MANUAL:
		 executeMan(command);
		 break;
		 
		 case WHY:
		 executeWhy(command);
		 break;
		 
		 default:
		 executeExec(command);
		 break;
	 }

	 debugCMD(command);
}
	 
void executeEcho(Builtin* command){
	FILE* inputFile;
	FILE* outputFile;
	int i;

	subVar(command);
	
	if((strlen(command->outFile) <= 0) && (strlen(command->inFile) <= 0)){
	for(i = 1; i < (command->n)-1; i++) {
		 printf("%s ", command->values[i]);
	}
	printf("%s\n", command->values[command->n - 1]);
	}
	
	else if((strlen(command->outFile) >0) && ( strlen(command->inFile) <= 0)){
		outputFile = fopen(command->outFile, "w");
		for( i = 1; i <command->n -1; i++){
			fprintf(outputFile, "%s ", command->values[i]);
		}
		fprintf(outputFile, "%s\n", command->values[command->n - 1]);
		fclose(outputFile);
	}
	else if((strlen(command->outFile) <= 0) && ( strlen(command->inFile) > 0)){
		inputFile = fopen(command->inFile, "r");
		char check;
		int read = 0;
		char string[MAX_IN];
		check = fgetc(inputFile);
		while(check != EOF) {
			string[read] = check;
			check = fgetc(inputFile);
			read++;
		}
		string[read - 1] = '\0';
		char array[1];
		strcpy(array, string);
		printf("%s\n", array);
		//for some reason this next line gives a seg fault
		//invesigate that without the code works
		//fclose(inputFile);
	}
	else{
		inputFile = fopen(command->inFile, "r");
		outputFile = fopen(command->outFile, "w");
		char check;
		int read = 0;
		char string[MAX_IN];
		check = fgetc(inputFile);
		while(check != EOF) {
			string[read] = check;
			check = fgetc(inputFile);
			read++;
		}
		string[read - 1] = '\0';
		char array[1];
		strcpy(array, string);
		fprintf(outputFile, "%s", array);
		fclose(outputFile);

	}
	
}

int subVar(Builtin* command){
	
	int i;
	for(i = 0; i < command -> n; i++){
		char* value = command -> values[i];
		if(value[0] == '$'){
			char* val = getenv(&((command->values[i])[1]));
			//printf("Changing value %s\n",val);
			if(val != NULL){
				command -> values[i] = val;
			}
			else{
				command -> values[i] = "";
			}
		}		
	}
}

void setPositionals(Builtin* command){
	int i;
	
	char* positions[10];
	positions[0] = "0";
	positions[1] = "1";
	positions[2] = "2";
	positions[3] = "3";
	positions[4] = "4";
	positions[5] = "5";
	positions[6] = "6";
	positions[7] = "7";
	positions[8] = "8";
	positions[9] = "9";
	
	for(i = 0; i < command->n ; i++){
		if(i < 10){
			printf("%s positional[%d] is %s\n", positions[i], i, positionals[i]);
			
			//setenv(positions[i], positionals[i],1);
		}
	}
}

void executeQuit(Builtin* command){
	if(command->n == 1){
		exit_status = 0;
		printf("Thank you for using XSSH, exiting...\n");
		exit(cmd_exit_status);
	}
	exit_status = atoi(command->values[1]);
	printf("Thank you for using XSSH, exiting with exit status: %d\n", exit_status);
	exit(exit_status);
}
	
void executeExec(Builtin* command){
	if(command->next != NULL){
		system(currentCMD);
		}
	else{
	/* Check for environment variables */
	if(command->values[0][0] == '$'){
		if(command->values[0][1] == '$'){
			printf("PID of this XSSH is %d\n", getpid());
		}
		else if(command->values[0][1] == '!'){
			printf("PID of most recent process executed in background is %d\n", background_pid);
		}
		else if(command -> values[0][1] == '?'){
			printf("Exit status of last foreground command is %d\n", cmd_exit_status);
		}
		else if(command -> values[0][1] >= '0' && command -> values[0][1] <= '9'){
			char* word = &((command->values[0])[1]);
			int location = atoi(word);
			printf("%s\n", positionals[location]);
		}
		else{
			printf("%s\n", getenv(&((command->values[0])[1])));
		}
		return;
	}	
	
	//setPositionals(command);
	
	subVar(command);
	
	/*Output redirection code */
	int saveSTDOUT, outFD;
	if(strlen(command->outFile) > 0){
		printf("Output redirection code\n");
		outFD = open(command->outFile, O_WRONLY | O_CREAT | O_TRUNC);
		saveSTDOUT = dup(fileno(stdout));
		dup2(outFD, fileno(stdout));
		close(outFD);	
	}
	
	/* Input redirection code */
	int saveSTDIN, inFD;
	if(strlen(command->inFile) > 0 ) {
		printf("Input redirection code\n");
		inFD = open(command->inFile, O_WRONLY | O_CREAT | O_TRUNC);
		saveSTDIN = dup(fileno(stdin));
		dup2(inFD, fileno(stdin));
		close(inFD);
	}
	
	/* Run external commands */
	command->values[command->n] = NULL;
	pid_t child;
	child = fork();
	int cStatus = 0;

	if(child < 0){
		printf("Fork to the child process failed\n");
	}
	else if(child == 0) {
		 /* printf("Forking child %d\n", getpid()); */
		int i;	
		if(command->cmd != 1){	
			execvp(command->values[0], command->values);
			printf("%s is not a valid internal or external command\n", command->values[0]);
		}
		exit(-1);
	}
	else {
		if(command -> isBackground){
			background_pid = child;
			printf("Background child %d created\n", background_pid);
			backgroundedProcesses = g_list_append(backgroundedProcesses, GINT_TO_POINTER(child));
		}
		else{
			waitpid(child, &cStatus, 0);
			cmd_exit_status = WEXITSTATUS(cStatus);
		}
	}
	
	if(strlen(command->outFile) > 0){
	 	dup2(saveSTDOUT, fileno(stdout));
	 	close(saveSTDOUT);
	}
	if(strlen(command->inFile) > 0){
	 	dup2(saveSTDIN, fileno(stdin));
	 	close(saveSTDIN);
	}	
}
}

void executeWait(Builtin* command){
	int pid = atoi(command->values[1]);
	printf("pid is: %d\n", pid);
	
	/* Wait for anything to complete */
	if(pid == -1){
		int originalLength = g_list_length(backgroundedProcesses);
			while((g_list_length(backgroundedProcesses)==originalLength) && (g_list_length(backgroundedProcesses) != 0)){
				sleep(10);
			}
	} 
	
	/* Wait for ALL to complete */
	else if (pid == 0){
		while(g_list_length(backgroundedProcesses)!=0){
				sleep(10);
			}
	} 
	
	/* Wait for a specific process to complete */
	else {
		while(g_list_find(backgroundedProcesses, GINT_TO_POINTER(pid)) != NULL){
				sleep(10);
		}
	}
}

void executeSet(Builtin* command){
	/* Get variable name and strip off $ */
	char* env = command -> values[1];
	char* variable = &(env[1]);
	
	/* Check for just the set command */
	if(command -> n == 1){
		printf("Display currently set variables...\n");
		system("printenv");
	}
	
	/* Check for an environment variable or a variable and an argument */
	else{
		if(checkEnvVarAttribs(variable)){
			/* Just a variable, so set to empty string */
			if(command -> n == 2) {
				/*printf("Assign as the empty string\n");*/
				if(setenv(variable, "", 1)==-1){
					printf("Set for %s failed\n", variable);
				}
			}
			
			/* Variable and value, so set variable to value */
			else{
				/*printf("Assign %s as %s\n", variable, command->values[2]);*/
				if(setenv(variable, command->values[2], 1)==-1){
					printf("Set for %s failed\n", variable);
				}
			}
		}
	}
}

int checkEnvVarAttribs(char* var){
	/* Not be an empty string */
	if(var[0] == '\0'){
		return 0;
	}
	
	/* Check first character for [A-Z], not begin with [0-9_] */
	if(!('A' <= (var[0]) && (var[0]) <='Z')){
		printf("First character %c is not valid\n", var[0]);
		return 0;
	}
	
	/* Check all subsequent characters for [A-Z0-9_] */
	int checkChar = 1;
	while(var[checkChar] != '\0' && var[checkChar] != '\n'){
		if(!((('A' <= (var[checkChar]) && (var[checkChar]) <= 'Z')) || (var[checkChar] == '_') || ('0' <= var[checkChar] && var[checkChar] <= '9'))){
					printf("Internal character %c is not allowed\n", var[checkChar]);
					return 0;
				}
		checkChar++;
	}
	return 1;
}

void executeUnset(Builtin* command){
	int i;
	/* Loop through all potential environment variables to unset */
	for(i = 1; i <  command -> n; i++){
		char* env = command -> values[i];
		char* variable = &(env[1]);
		/* Check to make sure it is an env variable */
		if(checkEnvVarAttribs(variable)){
			/*printf("Unsetting %s\n", variable);*/
			/* Check to make sure unset succeeded */
			if(unsetenv(variable)==-1){
				printf("Variable %s unset failed\n",variable);
			}
		}
	}
}

void executePWD(void) {
	printf("%s\n", getcwd(NULL, 0));
}

void executeCD(Builtin* command) {
	/* Do we want to allow ~ to be used as $HOME variable substitute? */
	chdir(command->values[1]);
}

void executeCHDIR(Builtin* command) {
	chdir(command->values[1]);
}

void debugCMD(Builtin* command){
	if(command->cmd != 1){
		if(debug_level != 0){
  			int i;
			printf("Debugging level %d\n", debug_level);
			printf("Expression: %i\n", command -> cmd);
			printf("Input file: %s\n", command -> inFile);
			printf("Output file: %s\n", command -> outFile);
			printf("Number of arguments: %d\n", command -> n);
			printf("Arguments: \n");
			for(i = 0; i < command -> n; i++){
				printf("Argument[%d] = %s\n", i, command -> values[i]);
			}
		}
	}
}

void executeWhy(Builtin* command){
	int length = 16;
	char* listOfWhys[length];
	listOfWhys[0] = "Because";
	listOfWhys[1] = "42";
	listOfWhys[2] = "No reason";
	listOfWhys[3] = "XSSH hates you";
	listOfWhys[4] = "XSSH loves you";
	listOfWhys[5] = "The bits inside your computer are all backwards";
	listOfWhys[6] = "There are no bits inside your computer";
	listOfWhys[7] = "Jake Sheets is watching you sleep";
	listOfWhys[8] = "Mike McDonald is being pretentious";
	listOfWhys[9] = "Matt Spurr just is...";
	listOfWhys[10] = "Jake Schuenke is busy coding";
	listOfWhys[11] = "I just ate your bytes";
	listOfWhys[12] = "Om nom nom";
	listOfWhys[13] = "Sprinkles and cheese!";
	listOfWhys[14] = "It's so fluffy I could die";
	listOfWhys[15] = "RAWWWWWWWWRRRRGH!!!!!!";
	srand(time(0));
	
	int ran = rand() % length;
	printf("%s\n", listOfWhys[ran]);
}

void executeMan(Builtin* command){
	pid_t fork_pid, my_pid;
  int x;
  int stat_loc;
  
  fork_pid = fork();   //Create a child process
  if (fork_pid < 0){
    fprintf(stderr, "Fork failed\n");
    exit(-1);
  }
  
  my_pid = getpid();
  
  if (fork_pid == 0){ //If the current process is the child process.
    //printf("I am the child process.  fork_pid = %d, my_pid = %d\n", fork_pid, my_pid);
    
    printf("%d", command->n);
    execv("./manual", command->values);
    waitpid(my_pid, &stat_loc, 0); 
  }
  else{ //If the current process is the parent process
    //printf("I am the parent process.  fork_pid = %d, my_pid = %d\n", fork_pid, my_pid);
    
    waitpid(fork_pid, &stat_loc, 0); 
    
  }	
	
}

char* commandToString(Builtin* command){
	switch(command->cmd){
		case 0:
		return "none";
		
		case 1:
		return "echo";
		
		case 2:
		return "quit";
		
		case 3:
		return "set";
		
		case 4:
		return "unset";
		
		case 5:
		return "wait";
		
		case 6:
		return "cd";
		
		case 7:
		return "chdir";
		
		case 8:
		return "exec";
		
		case 9:
		return "#";
		
		case 10:
		return "pwd";
		
		case 11:
		return "manual";
		
		case 12:
		return "why";
	}
}
